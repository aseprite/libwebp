                                      WebPMux
                                     ~~~~~~~~~

Description:
============

WebP Mux: library to create the MUX container object for features like
Color profile, XMP metadata, Animation & Tiling. A reference command line
tool 'webpmux' is also provided in this package.


WebP Mux tool:
==============

The examples/ directory contains tool (webpmux) for manipulating the WebP Mux file.
webpmux tool can be used to create a WebP container file and extract/strip relevant data
from the container file.

A list of options is available using the -help command line flag:

> webpmux -help
Usage: webpmux -get GET_OPTIONS INPUT -o OUTPUT                       Extract relevant data.
   or: webpmux -set SET_OPTIONS INPUT -o OUTPUT                       Set color profile/metadata.
   or: webpmux -strip STRIP_OPTIONS INPUT -o OUTPUT                   Strip color profile/metadata.
   or: webpmux [-tile TILE_OPTIONS]... -o OUTPUT                      Create tiled image.
   or: webpmux [-frame FRAME_OPTIONS]... -loop LOOP_COUNT -o OUTPUT   Create animation.
   or: webpmux -info INPUT                                            Print info about given webp file.
   or: webpmux -help OR -h                                            Print this help.

GET_OPTIONS:
   icc       Get ICCP Color profile.
   xmp       Get XMP metadata.
   tile n    Get nth tile.
   frame n   Get nth frame.

SET_OPTIONS:
   icc       Set ICC Color profile.
   xmp       Set XMP metadata.

STRIP_OPTIONS:
   icc       Strip ICCP color profile.
   xmp       Strip XMP metadata.

TILE_OPTIONS(i):
   file_i +xi+yi
   where:    'file_i' is the i'th tile (webp format),
             'xi','yi' specify the image offset for this tile.

FRAME_OPTIONS(i):
   file_i +xi+yi+di
   where:    'file_i' is the i'th animation frame (webp format),
             'xi','yi' specify the image offset for this frame.
             'di' is the pause duration before next frame.

INPUT & OUTPUT are in webp format.



WebP Mux API:
==============
An API containing methods for adding data to WebPMux (a MUX container object
for a WebP file) and reading data from WebPMux. This API currently supports
XMP metadata, Color profile, Animation & Tiling. Other features will be added
in subsequent releases.


WebPMux* WebPMuxNew(int copy_data);
Description:
        Creates an empty mux object.
Parameters:
        copy_data - (in) 0 or 1 value indicating whether the reference or data
        is to be copied in subsequent calls.
Returns:
        A pointer to the newly created empty mux object.


WebPMuxError WebPMuxCreate(WebPMux* const mux, const uint8_t* data, uint32_t size);
Description:
        Creates a mux object from raw data given in WebP RIFF format.
Parameters:
        mux - (out) object to be created from given data
        data - (in) the raw data in WebP RIFF format
        size - (in) size of raw data
Returns:
        WEBP_MUX_INVALID_ARGUMENT - if mux is NULL
        WEBP_MUX_BAD_DATA - if data cannot be read as a mux object
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success
Note:
        WebPMuxNew() should be called before calling this function.


WebPMuxError WebPMuxSetMetadata(WebPMux* const mux, const uint8_t* data, uint32_t size);
Description:
        Sets the XMP metadata in the mux object.
Parameters:
        mux - (in/out) object to which the XMP metadata is to be added
        data - (in) the XMP metadata data to be added
        size - (in) size of the XMP metadata data
Returns:
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success


WebPMuxError WebPMuxSetColorProfile(WebPMux* const mux, const uint8_t* data, uint32_t size);
Description:
        Sets the color profile in the mux object.
Parameters:
        mux - (in/out) object to which the color profile is to be added
        data - (in) the color profile data to be added
        size - (in) size of the color profile data
Returns:
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success


WebPMuxError WebPMuxSetLoopCount(WebPMux* const mux, uint32_t loop_count);
Description:
        Sets the animation loop count in the mux object.
Parameters:
        mux - (in/out) object in which loop chunk is to be set/added
        loop_count - (in) the animation loop count value to be stored in the loop chunk.
        Note that loop_count of zero denotes infinite loop.
Returns:
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success


WebPMuxError WebPMuxAddFrame(WebPMux* const mux, uint32_t nth, const uint8_t* data,
                             int32_t size, uint32_t x_offset, uint32_t y_offset,
                             uint32_t duration);
Description:
        Adds an animation frame to the mux object.
Parameters:
        mux - (in/out) object to which an animation frame is to be added
        nth - (in) The position at which the frame is to be added.
        data - (in) the frame chunk data to be added
        size - (in) size of frame chunk data
        x_offset  - (in) x-offset of the frame to be added
        y_offset - (in) y-offset of the frame to be added
        duration - (in) duration of the frame to be added (in milliseconds)
Returns:
        WEBP_MUX_NOT_FOUND - If we have less than (nth-1) frames before adding
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success
Note:
        nth=0 has a special meaning. Addition will be at the last position.


WebPMuxError WebPMuxAddTile(WebPMux* const mux, uint32_t nth, const uint8_t* data,
                            uint32_t size, uint32_t x_offset, uint32_t y_offset);
Description:
        Adds a tile to the mux object.
Parameters:
        mux - (in/out) object to which a tile is to be added
        nth - (in) The position at which the tile is to be added.
        data - (in) the tile chunk data to be added
        size - (in) size of tile chunk data
        x_offset  - (in) x-offset of the tile to be added
        y_offset - (in) y-offset of the tile to be added
        copy_data - (in) 0 or 1 value indicating whether the data is to be copied.
Returns:
        WEBP_MUX_NOT_FOUND - If we have less than (nth-1) tiles before adding
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success
Note:
        nth=0 has a special meaning. Addition will be at the last position.


WebPMuxError  WebPMuxAddNamedData(WebPMux* const mux, uint32_t nth, const char* const tag,
                                  const uint8_t* data, uint32_t size);
Description:
        Adds a chunk with given tag at nth position.
Parameters:
        mux - (in/out) object to which a chunk is to be added
        nth - (in) The position at which the chunk is to be added.
        tag - (in) tag name specifying the type of chunk
        data - (in) the chunk data
        size - (in) size of tile chunk data
Returns:
        WEBP_MUX_INVALID_ARGUMENT - if mux is NULL
        WEBP_MUX_INVALID_PARAMETER - if tag is invalid
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success
Note:
        nth=0 has a special meaning. Addition will be at the last position.


WebPMuxError WebPMuxDeleteMetadata(WebPMux* const mux);
Description:
        Deletes the XMP metadata in the mux object.
Parameters:
        mux - (in/out) object from which XMP metadata is to be deleted
Returns:
        WEBP_MUX_NOT_FOUND - If mux does not contain metadata
        WEBP_MUX_OK - on success


WebPMuxError WebPMuxDeleteColorProfile(WebPMux* const mux);
Description:
        Deletes the color profile in the mux object.
Parameters:
        mux - (in/out) object from which color profile is to be deleted
Returns:
        WEBP_MUX_NOT_FOUND - If mux does not contain color profile
        WEBP_MUX_OK - on success


WebPMuxError WebPMuxDeleteFrame(WebPMux* const mux, uint32_t nth);
Description:
        Deletes an animation frame from the mux object.
Parameters:
        mux - (in/out) object from which a frame is to be deleted
        nth - (in) The position from which the frame is to be deleted
Returns:
        WEBP_MUX_NOT_FOUND - If there are less than nth frames in the mux object before deletion
        WEBP_MUX_OK - on success
Note:
        nth=0 has a special meaning: the last frame will be deleted.


WebPMuxError WebPMuxDeleteTile(WebPMux* const mux, uint32_t nth);
Description:
        Deletes a tile from the mux object.
Parameters:
        mux - (in/out) object from which a tile is to be deleted
        nth - (in) The position from which the tile is to be deleted
Returns:
        WEBP_MUX_NOT_FOUND - If there are less than nth tiles in the mux object before deletion
        WEBP_MUX_OK - on success
Note:
        nth=0 has a special meaning: the last tile will be deleted.


WebPMuxError WebPMuxAssemble(WebPMux* const mux, uint8_t** output_data, uint32_t* output_size);
Description:
        Assembles all chunks in WebP RIFF format and and returns in output_data.
Parameters:
        mux - (in/out) object whose chunks are to be assembled
        output_data - (out) byte array where assembled WebP file format data is returned
        output_size - (out) size of returned data
Returns:
        WEBP_MUX_BAD_DATA - if mux object is invalid
        WEBP_MUX_INVALID_ARGUMENT - if either mux, output_data or output_size is NULL.
        WEBP_MUX_MEMORY_ERROR - on memory allocation error
        WEBP_MUX_OK - on success
Notes:
        (i) This function also validates mux object before writing.
        (ii) This function does NOT free the mux object.
        The caller function should free the mux object after output_data has been consumed.


WebPMuxError WebPMuxGetFeatures(const WebPMux* mux, uint32_t* flags);
Description:
        Gets the feature flags from the mux object.
Parameters:
        mux - (in) object from which the features are to be fetched
        flags - (out) the flags specifying which features are present in the mux object.
                The following identifiers can be used to test presence of individual features.
Returns:
        WEBP_MUX_NOT_FOUND - if VP8X chunk is not present in mux object
        WEBP_MUX_BAD_DATA - if VP8X chunk in mux is invalid
        WEBP_MUX_OK - on success
Note:
        Current flags are as follows:

        Feature                 Identifier              Value
        -------                 ----------              -----
        Tile                    TILE_FLAG               0x00000001
        Animation               ANIMATION_FLAG          0x00000002
        Color Profile           ICCP_FLAG               0x00000004
        XMP Metadata            META_FLAG               0x00000008


WebPMuxError WebPMuxGetMetadata(const WebPMux* mux, const uint8_t** data, uint32_t* size);
Description:
        Gets a reference to the XMP metadata in the mux object.
Parameters:
        mux - (in) object from which the XMP metadata is to be fetched
        data - (out) the returned XMP metadata
        size - (out) size of the returned XMP metadata
Returns:
        WEBP_MUX_NOT_FOUND - if metadata is not present in mux object
        WEBP_MUX_OK - on success
Note:
        The caller should not free the returned data.


WebPMuxError WebPMuxGetColorProfile(const WebPMux* mux, const uint8_t** data, uint32_t* size);
Description:
        Gets a reference to the color profile in the mux object.
Parameters:
        mux - (in) object from which the color profile data is to be fetched
        data - (out) the returned color profile data
        size - (out) size of the returned color profile data
Returns:
        WEBP_MUX_NOT_FOUND - if color profile is not present in mux object
        WEBP_MUX_OK - on success
Note:
        The caller should not free the returned data.


WebPMuxError WebPMuxGetLoopCount (const WebPMux* mux, uint32_t* loop_count);
Description:
        Gets the animation loop count from the mux object.
Parameters:
        mux - (in) object from which the loop count is to be fetched
        loop_count - (out) the loop_count value present in the LOOP chunk within mux object
Returns:
        WEBP_MUX_NOT_FOUND - if loop chunk is not present in mux object
        WEBP_MUX_OK - on success


WebPMuxError WebPMuxGetFrame(const WebPMux* mux, uint32_t nth, const uint8_t** data,
                             uint32_t* size, uint32_t* x_offset, uint32_t* y_offset,
                             uint32_t* duration);
Description:
        Gets a reference to the nth animation frame from the mux object.
Parameters:
        mux - (in) object from which the info is to be fetched
        nth - (in) index of the frame in the mux object
        data - (out) the returned image data
        size - (out) size of the returned image data
        x_offset - (out) x-offset of the returned frame
        y_offset - (out) y-offset of the returned frame
        duration - (out) duration of the returned frame (in milliseconds)
Returns:
        WEBP_MUX_NOT_FOUND - if there are less than nth frames in the mux object
        WEBP_MUX_BAD_DATA - if nth frame chunk in mux is invalid
        WEBP_MUX_OK - on success
Notes:
        (i) The caller should not free the returned data.
        (ii) nth=0 has a special meaning: the last frame will be fetched.


WebPMuxError WebPMuxGetTile(const WebPMux* mux, uint32_t nth, const uint8_t** data,
                            uint32_t* size, uint32_t* x_offset, uint32_t* y_offset);
Description:
        Gets a reference to the nth tile from the mux object.
Parameters:
        mux - (in) object from which the info is to be fetched
        nth - (in) index of the tile in the mux object
        data - (out) the returned image data
        size - (out) size of the returned image data
        x_offset - (out) x-offset of the returned tile
        y_offset - (out) y-offset of the returned tile
Returns:
        WEBP_MUX_NOT_FOUND - If there are less than nth tiles in the mux object
        WEBP_MUX_BAD_DATA - if nth tile chunk in mux is invalid
        WEBP_MUX_OK - on success
Notes:
        (i) The caller should not free the returned data.
        (ii) nth=0 has a special meaning: the last tile will be fetched.


WebPMuxError WebPMuxNumNamedElements(const WebPMux* mux, const char* tag, int* num_elements);
Description:
        Gets the number of chunks having tag value tag in the mux object.
Parameters:
        mux - (in) object from which the info is to be fetched
        tag - (in) tag name specifying the type of chunk
        num_elements - (out) number of chunks having tag value tag in the mux object
Returns:
        WEBP_MUX_INVALID_ARGUMENT - if mux is NULL
        WEBP_MUX_OK - on success


WebPMuxError WebPMuxGetNamedData(const WebPMux* mux, const char* tag, uint32_t nth,
                                 const uint8_t** data, uint32_t* size);
Description:
        Gets a reference to the nth chunk having tag value tag in the mux object.
Parameters:
        mux - (in) object from which a chunk is to be fetched
        tag - (in) tag name specifying which type of chunk is to be fetched
        nth - (in) index which specifies which among the chunks of type tag is to be fetched
        data - (out) raw data of the chunk returned
        size - (out) size of the returned data
Returns:
        WEBP_MUX_NOT_FOUND - If there are less than nth named elements in the mux object
        WEBP_MUX_OK - on success
Notes:
        (i) The caller should not free the returned data.
        (ii) nth=0 has a special meaning: the last named element will be fetched.


void WebPMuxDelete(WebPMux* const mux);
Description:
        Deletes the mux object.
Parameters:
        mux - (in/out) object to be deleted
